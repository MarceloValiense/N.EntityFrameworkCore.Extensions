using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using N.EntityFrameworkCore.Extensions.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;

namespace N.EntityFrameworkCore.Extensions
{
    public class TableMapping
    {
        public DbContext DbContext { get; private set; }
        public IEntityType EntityType { get; set; }
        public IProperty[] Properties { get; }
        public string Schema { get; }
        public string TableName { get; }
        public IEnumerable<IEntityType> EntityTypes { get; }

        public bool HasIdentityColumn => EntityType.FindPrimaryKey().Properties.Any(o => o.ValueGenerated != ValueGenerated.Never);
        public StoreObjectIdentifier StoreObjectIdentifier => StoreObjectIdentifier.Table(TableName, EntityType.GetSchema());
        public string FullQualifedTableName
        {
            get { return string.Format("[{0}].[{1}]", this.Schema, this.TableName);  }
        }

        public TableMapping(DbContext dbContext, IEntityType entityType)
        {
            DbContext = dbContext;
            EntityType = entityType;
            Properties = entityType.GetProperties().ToArray();
            Schema = entityType.GetSchema() ?? "dbo";
            TableName = entityType.GetTableName();
            EntityTypes = EntityType.GetAllBaseTypesInclusive().Where(o => !o.IsAbstract());

            var options = dbContext.GetPrivateFieldValue("_options") as DbContextOptions;
        }
        public IEnumerable<string> GetQualifiedColumnNames(IEnumerable<string> columnNames, IEntityType entityType = null)
        {
            return EntityType.GetProperties().Where(o => (entityType == null || o.GetDeclaringEntityType() == entityType) 
                && columnNames == null || columnNames.Contains(o.GetColumnName()))
                .Select(o => string.Format("[{0}].[{1}]", FindTableName(o.GetDeclaringEntityType(), EntityType), o.GetColumnName()));
        }

        private string FindTableName(IEntityType declaringEntityType, IEntityType entityType)
        {
            return !declaringEntityType.IsAbstract() ? declaringEntityType.GetTableName() : entityType.GetTableName();
        }

        public IEnumerable<string> GetColumnNames(IEntityType entityType)
        {
            return entityType.GetProperties().Where(o => (o.GetDeclaringEntityType() == entityType || o.GetDeclaringEntityType().IsAbstract() 
                    || o.IsForeignKeyToSelf()) && o.ValueGenerated == ValueGenerated.Never)
                .Select(o => o.GetColumnName());
        }
        public IEnumerable<string> GetColumns(bool includePrimaryKeyColumns=false)
        {
            var columns = EntityType.GetProperties().Where(o => o.ValueGenerated == ValueGenerated.Never)
                .Select(o => o.GetColumnName());
            if(includePrimaryKeyColumns)
            {
                columns = columns.Union(GetPrimaryKeyColumns());
            }
            return columns;
        }
        public IEnumerable<string> GetPrimaryKeyColumns()
        {
            return EntityType.FindPrimaryKey().Properties.Select(o => o.GetColumnName(this.StoreObjectIdentifier));
        }

        internal IEnumerable<string> GetAutoGeneratedColumns(IEntityType entityType = null)
        {
            entityType = entityType ?? this.EntityType;
            return entityType.GetProperties().Where(o => o.ValueGenerated != ValueGenerated.Never)
                .Select(o => o.GetColumnName(this.StoreObjectIdentifier));
        }

        internal IEnumerable<IProperty> GetEntityProperties(IEntityType entityType = null, ValueGenerated? valueGenerated = null)
        {
            entityType = entityType ?? this.EntityType;
            return entityType.GetProperties().Where(o => valueGenerated == null || o.ValueGenerated == valueGenerated).AsEnumerable();
        }

        internal IEnumerable<string> GetSchemaQualifiedTableNames()
        {
            return EntityTypes
                .Select(o => $"[{o.GetSchema()??"dbo"}].[{o.GetTableName()}]").Distinct();
        }
    }
}

